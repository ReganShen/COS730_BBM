import difflib
class trainedTopics():
    def __init__(self):
        #Topic must be Artificial Intelligence, sports, Gym, Cook, Paint, Gaming, music
        self.listOfTopics = self.getListOfTopicKeywords()


    def getListOfTopicKeywords(self):
        AI = ['AI', 'Artificial Intelligence', 'Machine Learning', 'Deep Learning',
              'Neural Networks',
              'Natural Language Processing',
              'Computer Vision',
              'Data Science',
              'Reinforcement Learning',
              'Supervised Learning',
              'Unsupervised Learning',
              'Semi-Supervised Learning',
              'Transfer Learning',
              'Big Data',
              'Data Mining',
              'Pattern Recognition',
              'Predictive Analytics',
              'Feature Extraction',
              'Dimensionality Reduction',
              'Clustering',
              'Classification',
              'Regression',
              'Decision Trees',
              'Random Forests',
              'Support Vector Machines',
              'Genetic Algorithms',
              'Artificial Neural Networks',
              'Convolutional Neural Networks',
              'Recurrent Neural Networks',
              'Gaussian Processes',
              'Bayesian Networks',
              'Knowledge Representation',
              'Expert Systems',
              'Natural Language Generation',
              'Chatbots',
              'Computer Speech Recognition',
              'Image Recognition',
              'Object Detection',
              'Anomaly Detection',
              'Recommendation Systems',
              'Data Preprocessing',
              'Model Evaluation',
              'Hyperparameter Optimization',
              'Bias-Variance Tradeoff',
              'Overfitting',
              'Underfitting',
              'Gradient Descent',
              'Backpropagation',
              'Ensemble Learning',
              'Autoencoders',
              'Generative Adversarial Networks',
              'TensorFlow',
              'Keras',
              'PyTorch',
              'Scikit-learn',
              'OpenCV',
              'Natural Language Toolkit (NLTK)',
              'Pandas',
              'NumPy',
              'Matplotlib',
              'Jupyter Notebook']
        sports = [
    'Football',
    'Basketball',
    'Soccer',
    'Baseball',
    'Tennis',
    'Golf',
    'Cricket',
    'Hockey',
    'Rugby',
    'Athletics',
    'Swimming',
    'Volleyball',
    'Badminton',
    'Table Tennis',
    'Cycling',
    'Boxing',
    'Martial Arts',
    'Wrestling',
    'Gymnastics',
    'Snowboarding',
    'Skiing',
    'Surfing',
    'Skateboarding',
    'Track and Field',
    'Triathlon',
    'Formula 1',
    'Motor Racing',
    'Horse Racing',
    'Equestrian',
    'Gym',
    'Fitness',
    'Sports Nutrition',
    'Sports Psychology',
    'Sports Medicine',
    'Sports Science',
    'Sports Analytics',
    'Coaching',
    'Refereeing',
    'Team Sports',
    'Individual Sports',
    'Olympics',
    'Paralympics',
    'World Cup',
    'Super Bowl',
    'NBA Finals',
    'World Series',
    'Tennis Grand Slam',
    'Golf Major',
    'Fantasy Sports',
    'Sports Betting',
    'Sports Broadcasting',
    'Sports Journalism',
    'Sports Sponsorship',
    'Sports Marketing',
    'Sports Stadiums',
    'Sports Equipment',
    'Sports Apparel',
    'Sports Fans',
    'Sportsmanship',
    'Fair Play',
    'Sports Injuries',
    'Sports Recovery',
    'Sports Training',
    'Sports Strategy',
    'Sports Tactics',
    'Sports Records',
    'Sports History',
    'Sports Legends'
]
        gym = [
    'Gym',
    'Fitness',
    'Workout',
    'Exercise',
    'Strength Training',
    'Cardio',
    'Weightlifting',
    'Bodybuilding',
    'CrossFit',
    'Yoga',
    'Pilates',
    'Zumba',
    'Aerobics',
    'HIIT',
    'Circuit Training',
    'Functional Training',
    'Resistance Training',
    'Flexibility',
    'Agility',
    'Endurance',
    'Muscle Building',
    'Fat Loss',
    'Calisthenics',
    'Powerlifting',
    'Kettlebell',
    'Dumbbell',
    'Barbell',
    'Treadmill',
    'Elliptical',
    'Stationary Bike',
    'Rowing Machine',
    'Stepper',
    'Strength Equipment',
    'Cardio Equipment',
    'Fitness Classes',
    'Group Exercise',
    'Personal Training',
    'Fitness Instructor',
    'Fitness Goals',
    'Fitness Tracker',
    'Workout Plan',
    'Exercise Routine',
    'Gym Membership',
    'Fitness Studio',
    'Fitness Community',
    'Fitness Motivation',
    'Health and Wellness',
    'Nutrition',
    'Healthy Lifestyle',
    'Weight Management',
    'Body Composition',
    'Supplements',
    'Protein',
    'Pre-workout',
    'Post-workout',
    'Sports Drinks',
    'Fitness Apparel',
    'Fitness Accessories',
    'Gym Bag',
    'Gym Shoes',
    'Fitness Technology',
    'Fitness Apps',
    'Fitness Trackers',
    'Heart Rate Monitoring',
    'Muscle Recovery',
    'Stretching',
    'Foam Rolling',
    'Injury Prevention',
    'Hydration',
    'Rest and Recovery',
    'Sleep',
    'Mindfulness',
    'Wellness',
    'Gym Etiquette',
    'Gym Safety',
    'Gym Environment'
]
        cook = ['Cooking',
    'Recipes',
    'Cuisine',
    'Food',
    'Ingredients',
    'Flavors',
    'Seasonings',
    'Spices',
    'Herbs',
    'Cooking Techniques',
    'Meal Preparation',
    'Meal Planning',
    'Kitchen',
    'Utensils',
    'Cookware',
    'Appliances',
    'Baking',
    'Roasting',
    'Grilling',
    'Sauteing',
    'Stir-frying',
    'Simmering',
    'Boiling',
    'Blanching',
    'Steaming',
    'Braising',
    'Marinating',
    'Broiling',
    'Poaching',
    'Sous Vide',
    'Slow Cooking',
    'Pressure Cooking',
    'Frying',
    'Deep Frying',
    'Pan-frying',
    'Baking',
    'Pastry',
    'Bread',
    'Cakes',
    'Cookies',
    'Desserts',
    'Pies',
    'Pasta',
    'Rice',
    'Noodles',
    'Salads',
    'Soups',
    'Stews',
    'Sauces',
    'Condiments',
    'Dips',
    'Marinades',
    'Dressings',
    'Beverages',
    'Cocktails',
    'Smoothies',
    'Healthy Cooking',
    'Vegetarian',
    'Vegan',
    'Gluten-free',
    'Dairy-free',
    'Low Carb',
    'Paleo',
    'Keto',
    'International Cuisine',
    'Italian',
    'French',
    'Mexican',
    'Indian',
    'Chinese',
    'Japanese',
    'Thai',
    'Mediterranean',
    'Middle Eastern',
    'Comfort Food',
    'Gourmet',
    'Farm-to-Table',
    'Food Photography',
    'Food Styling',
    'Cooking Shows',
    'Cooking Blogs',
    'Cooking Magazines',
    'Cooking Websites',
    'Celebrity Chefs',
    'Cooking Competitions',
    'Cookbooks',
    'Kitchen Hacks',
    'Cooking Tips',
    'Meal Ideas',
    'Cooking Resources',
    'Food Safety']
        paint =['Paint',
    'Painting',
    'Art',
    'Canvas',
    'Brushes',
    'Colors',
    'Palette',
    'Acrylic',
    'Oil',
    'Watercolor',
    'Gouache',
    'Pastel',
    'Encaustic',
    'Spray Paint',
    'Easel',
    'Medium',
    'Brushstrokes',
    'Texture',
    'Composition',
    'Still Life',
    'Landscape',
    'Portrait',
    'Abstract',
    'Realism',
    'Impressionism',
    'Expressionism',
    'Surrealism',
    'Modern Art',
    'Contemporary Art',
    'Artistic Techniques',
    'Layering',
    'Blending',
    'Glazing',
    'Wet-on-Wet',
    'Dry Brush',
    'Underpainting',
    'Scumbling',
    'Grisaille',
    'Impasto',
    'Fresco',
    'Palette Knife',
    'Gesso',
    'Varnish',
    'Lacquer',
    'Stenciling',
    'Masking',
    'Tape',
    'Painting Styles',
    'Still Life',
    'Landscape',
    'Portrait',
    'Figurative',
    'Abstract',
    'Nude',
    'Nature',
    'Animals',
    'Architecture',
    'Cityscape',
    'Seascape',
    'Floral',
    'Street Art',
    'Graffiti',
    'Mural',
    'Famous Painters',
    'Leonardo da Vinci',
    'Vincent van Gogh',
    'Pablo Picasso',
    'Claude Monet',
    'Michelangelo',
    'Rembrandt',
    'Salvador Dali',
    'Georgia O\'Keeffe',
    'Jackson Pollock',
    'Contemporary Painters',
    'Art Exhibitions',
    'Art Galleries',
    'Art Museums',
    'Art Movements',
    'Art History',
    'Color Theory',
    'Perspective',
    'Light and Shadow',
    'Proportion',
    'Composition',
    'Art Supplies',
    'Artists' ,'Materials',
    'Paint Brands',
    'Brush Types',
    'Canvas Types',
    'Artwork',
    'Artistic Expression',
    'Creative Process',
    'Artistic Inspiration',
    'Art Critique',
    'Art Education',
    'Art Workshops',
    'Art Classes',
    'Art Therapy',
    'Artistic Community']
        gaming = ['Games',
    'Gaming',
    'Video Games',
    'Console',
    'PC Gaming',
    'Mobile Gaming',
    'Online Gaming',
    'Multiplayer',
    'Single Player',
    'Gamer',
    'Game Development',
    'Game Design',
    'Game Engine',
    'Graphics',
    'Gameplay',
    'Virtual Reality',
    'Augmented Reality',
    'Simulation',
    'Role-Playing Game',
    'First-Person Shooter',
    'Strategy',
    'Adventure',
    'Action',
    'Sports',
    'Racing',
    'Puzzle',
    'Platform',
    'Indie Games',
    'Game Studios',
    'Game Publishers',
    'Game Consoles',
    'PC Games',
    'Console Games',
    'Mobile Games',
    'Online Games',
    'Game Streaming',
    'Esports',
    'Competitive Gaming',
    'Tournaments',
    'Game Community',
    'Game Forums',
    'Game Streaming Platforms',
    'Game Streaming Equipment',
    'Game Controllers',
    'Gaming Headsets',
    'Gaming Keyboards',
    'Gaming Mice',
    'Gaming Monitors',
    'Gaming Laptops',
    'Gaming PCs',
    'Game Genres',
    'Open World',
    'RPG',
    'FPS',
    'MMORPG',
    'MOBA',
    'RTS',
    'Sports',
    'Racing',
    'Adventure',
    'Survival',
    'Horror',
    'Puzzle',
    'Casual',
    'Strategy',
    'Simulation',
    'Platformer',
    'Action-Adventure',
    'Game Characters',
    'Game Storytelling',
    'Game Music',
    'Game Sound Effects',
    'Game Development Tools',
    'Game Programming',
    'Game Testing',
    'Game Marketing',
    'Game Monetization',
    'Game Analytics',
    'Game Localization',
    'Game Accessibility',
    'Game Reviews',
    'Game Ratings',
    'Game Updates',
    'Game Patches',
    'Game Expansion Packs',
    'Game Mods',
    'Game Cheats',
    'Game Walkthroughs',
    'Game Strategy Guides',
    'Game Collectibles',
    'Game Merchandise']
        music = ['Music',
    'Playing Music',
    'Musical Instruments',
    'Guitar',
    'Piano',
    'Violin',
    'Drums',
    'Bass',
    'Saxophone',
    'Trumpet',
    'Flute',
    'Clarinet',
    'Keyboard',
    'Harp',
    'Cello',
    'Ukulele',
    'Banjo',
    'Mandolin',
    'Accordion',
    'Music Theory',
    'Sheet Music',
    'Musical Notation',
    'Chords',
    'Scales',
    'Rhythm',
    'Melody',
    'Harmony',
    'Tempo',
    'Beat',
    'Meter',
    'Dynamics',
    'Phrasing',
    'Improvisation',
    'Composition',
    'Songwriting',
    'Arrangement',
    'Music Genres',
    'Rock',
    'Pop',
    'Jazz',
    'Classical',
    'Blues',
    'Country',
    'R&B',
    'Hip Hop',
    'Electronic',
    'Folk',
    'Reggae',
    'Latin',
    'World Music',
    'Music Performance',
    'Concerts',
    'Live Music',
    'Music Festivals',
    'Orchestra',
    'Band',
    'Ensemble',
    'Solo Performance',
    'Music Production',
    'Recording',
    'Mixing',
    'Mastering',
    'Sound Engineering',
    'Digital Audio Workstation (DAW)',
    'MIDI',
    'Sampling',
    'Audio Effects',
    'Music Software',
    'Music Equipment',
    'Amplifier',
    'Microphone',
    'Headphones',
    'Studio Monitors',
    'Audio Interface',
    'Music Education',
    'Music Lessons',
    'Music Schools',
    'Music Teachers',
    'Music Theory',
    'Ear Training',
    'Sight-Reading',
    'Music History',
    'Music Therapy',
    'Music and Emotions',
    'Music and Well-being',
    'Music and Memory',
    'Music and Cognitive Development',
    'Music Streaming',
    'Music Platforms',
    'Music Apps',
    'Music Discovery',
    'Music Recommendations',
    'Music Charts',
    'Music Lyrics',
    'Music Videos',
    'Music Artists',
    'Music Albums',
    'Music Concerts',
    'Music Awards',
    'Music Industry',
    'Music Business',
    'Music Marketing',
    'Music Copyright',
    'Music Licensing',
    'Music Publishing',
    'Music Contracts',
    'Music Promotion']

        dict = {}
        dict["Artificial Intelligence"] =AI
        dict["Sports"] = sports
        dict["Gym"] = gym
        dict["Cooking"] = cook
        dict["Painting"] = paint
        dict["Gaming"] = gaming
        dict["Music"] = music

        return dict
    def classifierIfExist(self,listOfWordsAndPercent):
        newListWithShit = []
        for p in listOfWordsAndPercent:
            percent = p[0]
            word = p[1]
            for t in self.listOfTopics:
                for keywords in self.listOfTopics[t]:
                    if word == keywords.lower():
                        # print(t + " : " + word)
                        stringsss = "#" + t #The # in front of a word means its a definite in the topic
                        tempShit = [percent,stringsss]
                        newListWithShit.append(tempShit)
                        break
                    elif word in keywords.lower():
                        r = self.string_similarity(word,keywords.lower()) #Here we updating the weighting when assigning a topic
                        stringsss = "#" + t  # The # in front of a word means its a definite in the topic
                        temp = r*percent
                        tempShit = [temp, stringsss]
        # print(listOfWordsAndPercent) #Now with this new list count all the classified topics and their percentage
        return self.getMajorityTopic(newListWithShit)
    def getMajorityTopic(self,ls):
        tempDict = {}
        for p in ls:
            percent = p[0]
            word = p[1] #If word begins with a #
            if word.startswith('#'):
                if word[1:] in tempDict:
                    tempDict[word[1:]] = tempDict[word[1:]] + float(percent)
                else:
                    tempDict[word[1:]] = float(percent)

        sortedDict = sorted(tempDict.items(), key=lambda x: x[1], reverse=True)
        converted_dict = dict(sortedDict)
        theOneAndOnly = ""
        for theTopic in converted_dict:
            theOneAndOnly = theTopic
            break
        return theOneAndOnly

    def string_similarity(self,str1, str2):
        result = difflib.SequenceMatcher(a=str1.lower(), b=str2.lower())
        return result.ratio()